package mayor;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Mayor extends Contract {
    public static final String BINARY = "0x60806040526000600160006101000a81548160ff02191690831515021790555060006001806101000a81548160ff02191690831515021790555060006002553480156200004b57600080fd5b50604051620033be380380620033be83398181016040528101906200007191906200032e565b826003908051906020019062000089929190620001b0565b5081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060800160405280600063ffffffff1681526020018263ffffffff168152602001600063ffffffff168152602001600063ffffffff168152506000808201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff160217905550905050505050620004e3565b8280548282559060005260206000209081019282156200022c579160200282015b828111156200022b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620001d1565b5b5090506200023b91906200023f565b5090565b5b808211156200025a57600081600090555060010162000240565b5090565b6000620002756200026f84620003c6565b6200039d565b905080838252602082019050828560208602820111156200029557600080fd5b60005b85811015620002c95781620002ae8882620002d3565b84526020840193506020830192505060018101905062000298565b5050509392505050565b600081519050620002e481620004af565b92915050565b600082601f830112620002fc57600080fd5b81516200030e8482602086016200025e565b91505092915050565b6000815190506200032881620004c9565b92915050565b6000806000606084860312156200034457600080fd5b600084015167ffffffffffffffff8111156200035f57600080fd5b6200036d86828701620002ea565b93505060206200038086828701620002d3565b9250506040620003938682870162000317565b9150509250925092565b6000620003a9620003bc565b9050620003b7828262000439565b919050565b6000604051905090565b600067ffffffffffffffff821115620003e457620003e36200046f565b5b602082029050602081019050919050565b6000620004028262000409565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600063ffffffff82169050919050565b62000444826200049e565b810181811067ffffffffffffffff821117156200046657620004656200046f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620004ba81620003f5565b8114620004c657600080fd5b50565b620004d48162000429565b8114620004e057600080fd5b50565b612ecb80620004f36000396000f3fe6080604052600436106100a75760003560e01c8063d0e30db011610064578063d0e30db0146101ad578063d3697fe5146101b7578063dfbf53ae146101ce578063e1254fba146101f9578063e2fdcc1714610236578063ed259f0a14610261576100a7565b806306a49fce146100ac5780631c9a34e3146100d75780635a26164b146101005780637772a8181461011c578063a24ca4db14610133578063c586ff6714610170575b600080fd5b3480156100b857600080fd5b506100c161028f565b6040516100ce91906125f0565b60405180910390f35b3480156100e357600080fd5b506100fe60048036038101906100f99190612171565b61031d565b005b61011a6004803603810190610115919061219a565b610500565b005b34801561012857600080fd5b50610131610a10565b005b34801561013f57600080fd5b5061015a60048036038101906101559190612148565b611651565b60405161016791906127ed565b60405180910390f35b34801561017c57600080fd5b50610197600480360381019061019291906121d6565b61173e565b6040516101a49190612612565b60405180910390f35b6101b5611774565b005b3480156101c357600080fd5b506101cc611a89565b005b3480156101da57600080fd5b506101e3611ff2565b6040516101f09190612575565b60405180910390f35b34801561020557600080fd5b50610220600480360381019061021b9190612148565b612018565b60405161022d9190612808565b60405180910390f35b34801561024257600080fd5b5061024b612064565b6040516102589190612575565b60405180910390f35b34801561026d57600080fd5b5061027661208a565b604051610286949392919061285a565b60405180910390f35b6060600380548060200260200160405190810160405280929190818152602001828054801561031357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102c9575b5050505050905090565b6003805490506000800160009054906101000a900463ffffffff1663ffffffff161461037e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610375906127ad565b60405180910390fd5b6000800160049054906101000a900463ffffffff1663ffffffff166000800160089054906101000a900463ffffffff1663ffffffff16106103f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103eb9061264d565b60405180910390fd5b6000801b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156104825760008001600881819054906101000a900463ffffffff168092919061046290612a57565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f8033de21ae72f21fa8773c90e60e7a5188cb8e44b97f487a5c362a491882ae34336040516104f5919061253f565b60405180910390a150565b6000800160049054906101000a900463ffffffff1663ffffffff166000800160089054906101000a900463ffffffff1663ffffffff1614610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d9061270d565b60405180910390fd5b6000801b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156105fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f29061274d565b60405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008060001b905083833460405160200161065c93929190612823565b6040516020818303038152906040528051906020012090508082146106b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ad9061268d565b60405180910390fd5b60001515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610749576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107409061266d565b60405180910390fd5b6001600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008001600c81819054906101000a900463ffffffff16809291906107c590612a57565b91906101000a81548163ffffffff021916908363ffffffff1602179055505034600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461083691906128e9565b92505081905550600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600081548092919061089090612a0e565b919050555034600260008282546108a791906128e9565b925050819055506004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180604001604052803481526020018473ffffffffffffffffffffffffffffffffffffffff16815250600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f389bc8f710c058e5d0507e8bd7a82953376bea3c5d11fddd2b31144904c5fc09333485604051610a02939291906125b9565b60405180910390a150505050565b6000800160049054906101000a900463ffffffff1663ffffffff1660008001600c9054906101000a900463ffffffff1663ffffffff1614610a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7d9061276d565b60405180910390fd5b60001515600160009054906101000a900460ff16151514610adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad39061272d565b60405180910390fd5b60018060006101000a81548160ff02191690831515021790555060008060005b60038054905081101561123357826009600060038481548110610b48577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115610db35760038181548110610bf1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506009600060038381548110610c9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015492506009600060038381548110610d43577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549150611220565b826009600060038481548110610df2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154141561121f57816009600060038481548110610ea0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154111561110b5760038181548110610f49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506009600060038381548110610ff2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549250600960006003838154811061109b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915061121e565b81600960006003848154811061114a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561121d57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b5b808061122b90612a0e565b915050610afc565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461158857600060096000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905060005b6003805490508110156114a557600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660038281548110611397577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461149257600960006003838154811061141b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201548261148f91906128e9565b91505b808061149d90612a0e565b915050611317565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561150e573d6000803e3d6000fd5b5060018060016101000a81548160ff0219169083151502179055507f871e83b983a039f59e0f4c08b833ff72e17dcba70607314804f13146995a8f76600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161157a919061255a565b60405180910390a15061164d565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6002549081150290604051600060405180830381858888f193505050501580156115f2573d6000803e3d6000fd5b507fbd41682cd287c67abfc2f1e2905b6ed4c01473f248fbf23c0a1a56f00d46045d600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611644919061255a565b60405180910390a15b5050565b6116596120e8565b6000800160049054906101000a900463ffffffff1663ffffffff1660008001600c9054906101000a900463ffffffff1663ffffffff16146116cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c69061276d565b60405180910390fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b600083838360405160200161175593929190612823565b6040516020818303038152906040528051906020012090509392505050565b6003805490506000800160009054906101000a900463ffffffff1663ffffffff16106117d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cc9061278d565b60405180910390fd5b60003411611818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180f9061262d565b60405180910390fd5b6000805b6003805490508110156118dd5760038181548110611863577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156118ca57600191506118dd565b80806118d590612a0e565b91505061181c565b506001151581151514611925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191c906126ed565b60405180910390fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154146119aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a1906126ad565b60405180910390fd5b60008001600081819054906101000a900463ffffffff16809291906119ce90612a57565b91906101000a81548163ffffffff021916908363ffffffff1602179055505034600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055503460026000828254611a4691906128e9565b925050819055507ffb46a943f28f53c5914eef5a8a24e6b4b22d953479505bd34828a7ae5a66e16b3334604051611a7e929190612590565b60405180910390a150565b6001151560018054906101000a900460ff16151514611add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad4906126cd565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc7906127cd565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611df5576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611db7573d6000803e3d6000fd5b507f47246c08017ef0128463e0eccba52d2824d3f712018037bc5d817926a428e7bd81604051611de79190612808565b60405180910390a150611ff0565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060096000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460096000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154611f6e919061293f565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611fb6573d6000803e3d6000fd5b507f47246c08017ef0128463e0eccba52d2824d3f712018037bc5d817926a428e7bd81604051611fe69190612808565b60405180910390a1505b565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060000160009054906101000a900463ffffffff16908060000160049054906101000a900463ffffffff16908060000160089054906101000a900463ffffffff169080600001600c9054906101000a900463ffffffff16905084565b60405180606001604052806000815260200160008152602001600081525090565b60008135905061211881612e50565b92915050565b60008135905061212d81612e67565b92915050565b60008135905061214281612e7e565b92915050565b60006020828403121561215a57600080fd5b600061216884828501612109565b91505092915050565b60006020828403121561218357600080fd5b60006121918482850161211e565b91505092915050565b600080604083850312156121ad57600080fd5b60006121bb85828601612133565b92505060206121cc85828601612109565b9150509250929050565b6000806000606084860312156121eb57600080fd5b60006121f986828701612133565b935050602061220a86828701612109565b925050604061221b86828701612133565b9150509250925092565b6000612231838361224c565b60208301905092915050565b612246816129d8565b82525050565b61225581612982565b82525050565b61226481612982565b82525050565b61227381612970565b82525050565b6000612284826128af565b61228e81856128c7565b93506122998361289f565b8060005b838110156122ca5781516122b18882612225565b97506122bc836128ba565b92505060018101905061229d565b5085935050505092915050565b6122e081612994565b82525050565b60006122f3600c836128d8565b91506122fe82612ae2565b602082019050919050565b6000612316602f836128d8565b915061232182612b0b565b604082019050919050565b60006123396028836128d8565b915061234482612b5a565b604082019050919050565b600061235c6033836128d8565b915061236782612ba9565b604082019050919050565b600061237f601e836128d8565b915061238a82612bf8565b602082019050919050565b60006123a26019836128d8565b91506123ad82612c21565b602082019050919050565b60006123c56017836128d8565b91506123d082612c4a565b602082019050919050565b60006123e86036836128d8565b91506123f382612c73565b604082019050919050565b600061240b6017836128d8565b915061241682612cc2565b602082019050919050565b600061242e6023836128d8565b915061243982612ceb565b604082019050919050565b6000612451603c836128d8565b915061245c82612d3a565b604082019050919050565b60006124746024836128d8565b915061247f82612d89565b604082019050919050565b6000612497602a836128d8565b91506124a282612dd8565b604082019050919050565b60006124ba6013836128d8565b91506124c582612e27565b602082019050919050565b6060820160008201516124e66000850182612512565b5060208201516124f96020850182612512565b50604082015161250c6040850182612512565b50505050565b61251b816129be565b82525050565b61252a816129be565b82525050565b612539816129c8565b82525050565b6000602082019050612554600083018461226a565b92915050565b600060208201905061256f600083018461223d565b92915050565b600060208201905061258a600083018461225b565b92915050565b60006040820190506125a5600083018561226a565b6125b26020830184612521565b9392505050565b60006060820190506125ce600083018661226a565b6125db6020830185612521565b6125e8604083018461226a565b949350505050565b6000602082019050818103600083015261260a8184612279565b905092915050565b600060208201905061262760008301846122d7565b92915050565b60006020820190508181036000830152612646816122e6565b9050919050565b6000602082019050818103600083015261266681612309565b9050919050565b600060208201905081810360008301526126868161232c565b9050919050565b600060208201905081810360008301526126a68161234f565b9050919050565b600060208201905081810360008301526126c681612372565b9050919050565b600060208201905081810360008301526126e681612395565b9050919050565b60006020820190508181036000830152612706816123b8565b9050919050565b60006020820190508181036000830152612726816123db565b9050919050565b60006020820190508181036000830152612746816123fe565b9050919050565b6000602082019050818103600083015261276681612421565b9050919050565b6000602082019050818103600083015261278681612444565b9050919050565b600060208201905081810360008301526127a681612467565b9050919050565b600060208201905081810360008301526127c68161248a565b9050919050565b600060208201905081810360008301526127e6816124ad565b9050919050565b600060608201905061280260008301846124d0565b92915050565b600060208201905061281d6000830184612521565b92915050565b60006060820190506128386000830186612521565b612845602083018561226a565b6128526040830184612521565b949350505050565b600060808201905061286f6000830187612530565b61287c6020830186612530565b6128896040830185612530565b6128966060830184612530565b95945050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006128f4826129be565b91506128ff836129be565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561293457612933612a84565b5b828201905092915050565b600061294a826129be565b9150612955836129be565b92508261296557612964612ab3565b5b828204905092915050565b600061297b8261299e565b9050919050565b600061298d8261299e565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006129e3826129ea565b9050919050565b60006129f5826129fc565b9050919050565b6000612a078261299e565b9050919050565b6000612a19826129be565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a4c57612a4b612a84565b5b600182019050919050565b6000612a62826129c8565b915063ffffffff821415612a7957612a78612a84565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e6f20736f756c2073656e740000000000000000000000000000000000000000600082015250565b7f43616e6e6f7420766f7465206e6f772c20766f74696e672071756f72756d206860008201527f6173206265656e20726561636865640000000000000000000000000000000000602082015250565b7f5468652073656e6465722068617320616c7265616479206f70656e207468652060008201527f656e76656c6f7065000000000000000000000000000000000000000000000000602082015250565b7f53656e7420656e76656c6f706520646f6573206e6f7420636f72726573706f6e60008201527f6420746f20746865206f6e652063617374656400000000000000000000000000602082015250565b7f596f75206861766520616c72656164792073656e742074686520736f756c0000600082015250565b7f43616e6e6f742061736b20666f722074686520726566756e6400000000000000600082015250565b7f596f7520617265206e6f7420612063616e646964617465000000000000000000600082015250565b7f43616e6e6f74206f70656e20616e20656e76656c6f70652c20766f74696e672060008201527f71756f72756d206e6f7420726561636865642079657400000000000000000000602082015250565b7f726573756c747320616c726561647920636865636b6564000000000000000000600082015250565b7f5468652073656e64657220686173206e6f742063617374656420616e7920766f60008201527f7465730000000000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f7420636865636b207468652077696e6e65722c206e65656420746f60008201527f206f70656e20616c6c207468652073656e7420656e76656c6f70657300000000602082015250565b7f43616e6e6f742073656e64206465706f7369742c20766f74696e67207374617260008201527f7465642100000000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f7420766f74652e2057616974696e6720736f756c732066726f6d2060008201527f63616e6469646174657300000000000000000000000000000000000000000000602082015250565b7f4e6f20726566756e6420617661696c61626c6500000000000000000000000000600082015250565b612e5981612970565b8114612e6457600080fd5b50565b612e7081612994565b8114612e7b57600080fd5b50565b612e87816129be565b8114612e9257600080fd5b5056fea264697066735822122022c54bcb647edeafa5f0e0373168ffbf8d92c530f304867626ba39b38b660f0564736f6c63430008040033";

    public static final String FUNC_ESCROW = "escrow";

    public static final String FUNC_VOTING_CONDITION = "voting_condition";

    public static final String FUNC_WINNER = "winner";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_CAST_ENVELOPE = "cast_envelope";

    public static final String FUNC_OPEN_ENVELOPE = "open_envelope";

    public static final String FUNC_MAYOR_OR_NOT_MAYOR = "mayor_or_not_mayor";

    public static final String FUNC_ASK_REFUND = "ask_refund";

    public static final String FUNC_COMPUTE_ENVELOPE = "compute_envelope";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_GETDEPOSIT = "getDeposit";

    public static final String FUNC_GETCANDIDATEVOTE = "getcandidateVote";

    public static final Event DEPOSITSOUL_EVENT = new Event("DepositSoul", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ENVELOPECAST_EVENT = new Event("EnvelopeCast", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ENVELOPEOPEN_EVENT = new Event("EnvelopeOpen", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event NEWMAYOR_EVENT = new Event("NewMayor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event NOWINNER_EVENT = new Event("NoWinner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REFUNDOBTAINED_EVENT = new Event("RefundObtained", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1623588568305", "0xBAc114782b99D44ACa6340859E6d4cE2bc054F0F");
    }

    @Deprecated
    protected Mayor(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Mayor(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Mayor(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Mayor(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DepositSoulEventResponse> getDepositSoulEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITSOUL_EVENT, transactionReceipt);
        ArrayList<DepositSoulEventResponse> responses = new ArrayList<DepositSoulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositSoulEventResponse typedResponse = new DepositSoulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._candidate = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._deposit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositSoulEventResponse> depositSoulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositSoulEventResponse>() {
            @Override
            public DepositSoulEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITSOUL_EVENT, log);
                DepositSoulEventResponse typedResponse = new DepositSoulEventResponse();
                typedResponse.log = log;
                typedResponse._candidate = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._deposit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositSoulEventResponse> depositSoulEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITSOUL_EVENT));
        return depositSoulEventFlowable(filter);
    }

    public List<EnvelopeCastEventResponse> getEnvelopeCastEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ENVELOPECAST_EVENT, transactionReceipt);
        ArrayList<EnvelopeCastEventResponse> responses = new ArrayList<EnvelopeCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EnvelopeCastEventResponse typedResponse = new EnvelopeCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._voter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EnvelopeCastEventResponse> envelopeCastEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EnvelopeCastEventResponse>() {
            @Override
            public EnvelopeCastEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ENVELOPECAST_EVENT, log);
                EnvelopeCastEventResponse typedResponse = new EnvelopeCastEventResponse();
                typedResponse.log = log;
                typedResponse._voter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EnvelopeCastEventResponse> envelopeCastEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENVELOPECAST_EVENT));
        return envelopeCastEventFlowable(filter);
    }

    public List<EnvelopeOpenEventResponse> getEnvelopeOpenEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ENVELOPEOPEN_EVENT, transactionReceipt);
        ArrayList<EnvelopeOpenEventResponse> responses = new ArrayList<EnvelopeOpenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EnvelopeOpenEventResponse typedResponse = new EnvelopeOpenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._voter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._soul = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._symbol = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EnvelopeOpenEventResponse> envelopeOpenEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EnvelopeOpenEventResponse>() {
            @Override
            public EnvelopeOpenEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ENVELOPEOPEN_EVENT, log);
                EnvelopeOpenEventResponse typedResponse = new EnvelopeOpenEventResponse();
                typedResponse.log = log;
                typedResponse._voter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._soul = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._symbol = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EnvelopeOpenEventResponse> envelopeOpenEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENVELOPEOPEN_EVENT));
        return envelopeOpenEventFlowable(filter);
    }

    public List<NewMayorEventResponse> getNewMayorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWMAYOR_EVENT, transactionReceipt);
        ArrayList<NewMayorEventResponse> responses = new ArrayList<NewMayorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewMayorEventResponse typedResponse = new NewMayorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._candidate = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewMayorEventResponse> newMayorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewMayorEventResponse>() {
            @Override
            public NewMayorEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWMAYOR_EVENT, log);
                NewMayorEventResponse typedResponse = new NewMayorEventResponse();
                typedResponse.log = log;
                typedResponse._candidate = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewMayorEventResponse> newMayorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWMAYOR_EVENT));
        return newMayorEventFlowable(filter);
    }

    public List<NoWinnerEventResponse> getNoWinnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NOWINNER_EVENT, transactionReceipt);
        ArrayList<NoWinnerEventResponse> responses = new ArrayList<NoWinnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NoWinnerEventResponse typedResponse = new NoWinnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._escrow = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NoWinnerEventResponse> noWinnerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NoWinnerEventResponse>() {
            @Override
            public NoWinnerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NOWINNER_EVENT, log);
                NoWinnerEventResponse typedResponse = new NoWinnerEventResponse();
                typedResponse.log = log;
                typedResponse._escrow = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NoWinnerEventResponse> noWinnerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NOWINNER_EVENT));
        return noWinnerEventFlowable(filter);
    }

    public List<RefundObtainedEventResponse> getRefundObtainedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REFUNDOBTAINED_EVENT, transactionReceipt);
        ArrayList<RefundObtainedEventResponse> responses = new ArrayList<RefundObtainedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RefundObtainedEventResponse typedResponse = new RefundObtainedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._soul = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RefundObtainedEventResponse> refundObtainedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RefundObtainedEventResponse>() {
            @Override
            public RefundObtainedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REFUNDOBTAINED_EVENT, log);
                RefundObtainedEventResponse typedResponse = new RefundObtainedEventResponse();
                typedResponse.log = log;
                typedResponse._soul = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RefundObtainedEventResponse> refundObtainedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REFUNDOBTAINED_EVENT));
        return refundObtainedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> escrow() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ESCROW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> voting_condition() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTING_CONDITION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> winner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WINNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> cast_envelope(byte[] _envelope) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CAST_ENVELOPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_envelope)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> open_envelope(BigInteger _sigil, String _symbol, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OPEN_ENVELOPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sigil), 
                new org.web3j.abi.datatypes.Address(_symbol)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> mayor_or_not_mayor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MAYOR_OR_NOT_MAYOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> ask_refund() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ASK_REFUND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> compute_envelope(BigInteger _sigil, String _symbol, BigInteger _soul) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPUTE_ENVELOPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sigil), 
                new org.web3j.abi.datatypes.Address(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_soul)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<List> getCandidates() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCANDIDATES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getDeposit(String candidate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(candidate)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Vote> getcandidateVote(String candidate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCANDIDATEVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(candidate)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Vote>() {}));
        return executeRemoteCallSingleValueReturn(function, Vote.class);
    }

    @Deprecated
    public static Mayor load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Mayor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Mayor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Mayor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Mayor load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Mayor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Mayor load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Mayor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Mayor> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, List<String> _candidate, String _escrow, BigInteger _quorum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_candidate, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(_escrow), 
                new org.web3j.abi.datatypes.generated.Uint32(_quorum)));
        return deployRemoteCall(Mayor.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Mayor> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, List<String> _candidate, String _escrow, BigInteger _quorum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_candidate, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(_escrow), 
                new org.web3j.abi.datatypes.generated.Uint32(_quorum)));
        return deployRemoteCall(Mayor.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Mayor> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, List<String> _candidate, String _escrow, BigInteger _quorum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_candidate, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(_escrow), 
                new org.web3j.abi.datatypes.generated.Uint32(_quorum)));
        return deployRemoteCall(Mayor.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Mayor> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, List<String> _candidate, String _escrow, BigInteger _quorum) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_candidate, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(_escrow), 
                new org.web3j.abi.datatypes.generated.Uint32(_quorum)));
        return deployRemoteCall(Mayor.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class Vote extends StaticStruct {
        public BigInteger sumSouls;

        public BigInteger number;

        public BigInteger deposit;

        public Vote(BigInteger sumSouls, BigInteger number, BigInteger deposit) {
            super(new org.web3j.abi.datatypes.generated.Uint256(sumSouls),new org.web3j.abi.datatypes.generated.Uint256(number),new org.web3j.abi.datatypes.generated.Uint256(deposit));
            this.sumSouls = sumSouls;
            this.number = number;
            this.deposit = deposit;
        }

        public Vote(Uint256 sumSouls, Uint256 number, Uint256 deposit) {
            super(sumSouls,number,deposit);
            this.sumSouls = sumSouls.getValue();
            this.number = number.getValue();
            this.deposit = deposit.getValue();
        }
    }

    public static class DepositSoulEventResponse extends BaseEventResponse {
        public String _candidate;

        public BigInteger _deposit;
    }

    public static class EnvelopeCastEventResponse extends BaseEventResponse {
        public String _voter;
    }

    public static class EnvelopeOpenEventResponse extends BaseEventResponse {
        public String _voter;

        public BigInteger _soul;

        public String _symbol;
    }

    public static class NewMayorEventResponse extends BaseEventResponse {
        public String _candidate;
    }

    public static class NoWinnerEventResponse extends BaseEventResponse {
        public String _escrow;
    }

    public static class RefundObtainedEventResponse extends BaseEventResponse {
        public BigInteger _soul;
    }
}
